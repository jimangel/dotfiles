#!/usr/bin/env bash
set -e

help() {
	echo "updatejunk - a simple script that makes installing/updating junk easier"
}

check_is_sudo() {
	if [ "$EUID" -ne 0 ]; then
		echo "Please run as root."
		exit
	fi
}

update_kubectl() {
	echo
	echo "Updating kubectl..."
	KUBERNETES_VERSION=$(curl -sSL https://storage.googleapis.com/kubernetes-release/release/stable.txt)
	curl -sSL "https://storage.googleapis.com/kubernetes-release/release/${KUBERNETES_VERSION}/bin/linux/amd64/kubectl" > /usr/local/bin/kubectl
	chmod +x /usr/local/bin/kubectl
	echo "kuebctl $(kubectl version --client --short)"
}

update_gcloud() {
	echo
	if ! hash gcloud 2>/dev/null; then
		echo "Updating gcloud..."
		# requires sudo
		echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] http://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
		curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
		apt update
		apt install google-cloud-sdk -y
	fi
	# future updates will be handled with apt-update
}

update_gimme() {
	echo
	echo "Updating gimme..."
	curl -sSL "https://raw.githubusercontent.com/travis-ci/gimme/master/gimme" > /usr/local/bin/gimme
	chmod +x /usr/local/bin/gimme
	echo "gimme (go) stable installed"
}

update_hugo() {
#CUR_VERSION="$(hugo version | cut -d'v' -f2 | cut -c 3-5)"
#NEW_VERSION="$(curl -s https://api.github.com/repos/gohugoio/hugo/releases/latest | grep tag_name | cut -d'.' -f2 | cut -d'"' -f1)"
#echo "Current Version: $CUR_VERSION => New Version: $NEW_VERSION"
#
#if [ "$NEW_VERSION" -ne "$CUR_VERSION" ]; then
	echo
	echo "Updating hugo..."
	LATEST_HUGO=$(curl -s https://api.github.com/repos/gohugoio/hugo/releases/latest | grep -oP '"tag_name": "\K(.*)(?=")')
	curl -sSL "https://github.com/gohugoio/hugo/releases/download/${LATEST_HUGO}/hugo_extended_${LATEST_HUGO//v}_Linux-64bit.tar.gz" > hugo_latest.tar.gz
	# requires sudo
	tar -xvzf hugo_latest.tar.gz hugo
	chmod +x hugo
	mv hugo /usr/local/bin/hugo
	rm hugo_latest.tar.gz
	echo "hugo installed"
}

update_kind() {
	echo
	echo "Updating kind...."
	LATEST_KIND=$(curl -s https://api.github.com/repos/kubernetes-sigs/kind/releases/latest | grep -oP '"tag_name": "\K(.*)(?=")')
	curl -sSL "https://github.com/kubernetes-sigs/kind/releases/download/${LATEST_KIND}/kind-linux-amd64" > kind
	chmod +x kind
	mv kind /usr/local/bin/kind
}


update_terraform() {
	echo
	echo "Updating terraform...."
	LATEST_TERRAFORM=$(curl -s https://api.github.com/repos/hashicorp/terraform/releases/latest | grep -oP '"tag_name": "\K(.*)(?=")')
	curl -sSL "https://releases.hashicorp.com/terraform/${LATEST_TERRAFORM//v}/terraform_${LATEST_TERRAFORM//v}_linux_amd64.zip" -o terraform.zip
	unzip terraform.zip
	rm terraform.zip
	chmod +x terraform
	mv terraform /usr/local/bin/terraform
}

update_vscode() {
	echo
	echo "Updating VScode..."
	if ! hash code 2>/dev/null; then
		curl -sSL "https://update.code.visualstudio.com/latest/linux-deb-x64/stable" -o vscode.deb
		apt install ./vscode.deb -y
		rm -rf vscode.deb
	fi
	# "Installing the .deb package will automatically install the apt repository and signing key to enable auto-updating using the system's package manager."
	# future upgrades?
	apt install --only-upgrade code -y
}

update_direnv() {
	echo
	echo "Updating direnv..."
	if ! hash direnv 2>/dev/null; then
		apt install direnv -f
	fi
	apt install --only-upgrade direnv
}

install_docker() {
	if ! hash docker 2>/dev/null; then
		# requires sudo
		curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
		add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
		apt update
		apt install docker-ce -y
		echo
		echo "add user to docker group with:"
		echo "sudo usermod -aG docker ${USER}"
		echo
		# clean
		# sudo apt remove docker docker-engine docker.io containerd runc
	fi
	# future updates will be handled with apt-update
}

update_helm() {
	echo
	echo "Updating helm...."
	# helm version should be manually set untill v2 is deprecated.
	echo "UPDATE HELM VERSION: https://github.com/helm/helm/releases"
	LATEST_HELM="v3.2.3"
	curl -sSL "https://get.helm.sh/helm-${LATEST_HELM}-linux-amd64.tar.gz" > helm_latest.tar.gz
	# requires sudo
	tar -xvzf helm_latest.tar.gz linux-amd64/helm
	chmod +x linux-amd64/helm
	mv linux-amd64/helm /usr/local/bin/helm
	rm -rf linux-amd64
	rm helm_latest.tar.gz
	echo "helm installed"
}

update_doctl() {
	echo
	echo "Updating doctl...."
	LATEST_DOCTL=$(curl -s https://api.github.com/repos/digitalocean/doctl/releases/latest | grep -oP '"tag_name": "\K(.*)(?=")')
	curl -sSL "https://github.com/digitalocean/doctl/releases/download/${LATEST_DOCTL}/doctl-${LATEST_DOCTL//v}-linux-amd64.tar.gz" > doctl_latest.tar.gz
	tar -xvzf doctl_latest.tar.gz doctl
	chmod +x doctl
	mv doctl /usr/local/bin/doctl
	rm doctl_latest.tar.gz
	echo "doctl installed"
}

update() {
	# update all the things
    check_is_sudo
	update_kubectl
	update_gcloud
	update_gimme
	update_hugo
	update_kind
	update_vscode
	update_direnv
	install_docker
	update_helm
	update_doctl
	# use apt for everything else
	apt update -y
	apt upgrade -y

}

main() {
	local arg=$1
	if [[ -n "$arg" ]]; then
		check_is_sudo
		$arg
	else
		update
	fi
}

main "$@"
